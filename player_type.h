/*$file${.::player_type.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: Player_type.qm
* File:  ${.::player_type.h}
*
* This code has been generated by QM 4.5.1 (https://www.state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${.::player_type.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifndef player_type_h
#define player_type_h
#ifdef __cplusplus
extern "C" {
#endif
#include "qhsm.h"    /* include own framework tagunil version */
#include "health.h"

//Start of h code from diagram
#define LOCAL 1
#define TAILOR 2
#define STALKER 3
#define DEAD 0
#define REGEN_THRESH_S 60
#define LOCAL_HP 200
#define TAILOR_HP 100
#define STALKER_HP 300
//End of h code from diagram


/*$declare${SMs::Player_type} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${SMs::Player_type} ......................................................*/
typedef struct {
/* protected: */
    QHsm super;

/* public: */
    unsigned int TimerRegen;
    unsigned int Timer;
    Health* CharHealth;
    QStateHandler StartState;
} Player_type;

/* protected: */
QState Player_type_initial(Player_type * const me, QEvt const * const e);
QState Player_type_global(Player_type * const me, QEvt const * const e);
QState Player_type_player_type(Player_type * const me, QEvt const * const e);
QState Player_type_alive(Player_type * const me, QEvt const * const e);
QState Player_type_may_regen(Player_type * const me, QEvt const * const e);
QState Player_type_normal(Player_type * const me, QEvt const * const e);
QState Player_type_regenerating(Player_type * const me, QEvt const * const e);
QState Player_type_tailor(Player_type * const me, QEvt const * const e);
QState Player_type_dead(Player_type * const me, QEvt const * const e);

#ifdef DESKTOP
QState Player_type_final(Player_type * const me, QEvt const * const e);
#endif /* def DESKTOP */

/*$enddecl${SMs::Player_type} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
__attribute__((__unused__))
static Player_type player_type; /* the only instance of the Player_type class */



typedef struct player_typeQEvt {
    QEvt super;
    int value;
} player_typeQEvt;


extern QHsm * const the_player_type; /* opaque pointer to the player_type HSM */

/*${SMs::Player_type_ctor} .................................................*/
void Player_type_ctor(unsigned int State, Health* CharHealth);
/*$enddecl${SMs::Player_type_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifdef __cplusplus
}
#endif
#endif /* player_type_h */
/*$file${.::player_type.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: Player_type.qm
* File:  ${.::player_type.h}
*
* This code has been generated by QM 4.5.1 (https://www.state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${.::player_type.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifndef player_type_h
#define player_type_h
#ifdef __cplusplus
extern "C" {
#endif
#include "qhsm.h"    /* include own framework tagunil version */
#include "health.h"

//Start of h code from diagram
#define LOCAL 1
#define TAILOR 2
#define STALKER 3
#define DEAD 0
#define REGEN_THRESH_S 60
#define LOCAL_HP 40
#define TAILOR_HP 60
#define STALKER_HP 100
//End of h code from diagram


/*$declare${SMs::Player_type} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*${SMs::Player_type} ......................................................*/
typedef struct {
/* protected: */
    QHsm super;

/* public: */
    unsigned int TimerRegen;
    Health* CharHealth;
    QStateHandler StartState;
} Player_type;

/* protected: */
QState Player_type_initial(Player_type * const me, QEvt const * const e);
QState Player_type_global(Player_type * const me, QEvt const * const e);
QState Player_type_player_type(Player_type * const me, QEvt const * const e);
QState Player_type_alive(Player_type * const me, QEvt const * const e);
QState Player_type_may_regen(Player_type * const me, QEvt const * const e);
QState Player_type_normal(Player_type * const me, QEvt const * const e);
QState Player_type_regenerating(Player_type * const me, QEvt const * const e);
QState Player_type_tailor(Player_type * const me, QEvt const * const e);
QState Player_type_dead(Player_type * const me, QEvt const * const e);

#ifdef DESKTOP
QState Player_type_final(Player_type * const me, QEvt const * const e);
#endif /* def DESKTOP */

/*$enddecl${SMs::Player_type} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

static Player_type player_type; /* the only instance of the Player_type class */



typedef struct player_typeQEvt {
    QEvt super;
    int value;
} player_typeQEvt;


extern QHsm * const the_player_type; /* opaque pointer to the player_type HSM */

/*${SMs::Player_type_ctor} .................................................*/
void Player_type_ctor(unsigned int State, Health* CharHealth);
/*$enddecl${SMs::Player_type_ctor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifdef __cplusplus
}
#endif
#endif /* player_type_h */
