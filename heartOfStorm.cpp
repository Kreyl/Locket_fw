/*****************************************************************************
* Model: heartOfStorm.qm
* File:  ./heartOfStorm.cpp
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::heartOfStorm.cpp} ...................................................*/
#include "qhsm.h"
#include "bsp.h"                   // Change this file for different platforms
#include "service.h"
#include "heartOfStorm.h"
#include "eventHandlers.h"

#include <stdint.h>


/* protected: */
static QState HeartOfStorm_initial(HeartOfStorm * const me, QEvt const * const e);
static QState HeartOfStorm_global(HeartOfStorm * const me, QEvt const * const e);
static QState HeartOfStorm_alive(HeartOfStorm * const me, QEvt const * const e);
static QState HeartOfStorm_NOT_IMMUNE(HeartOfStorm * const me, QEvt const * const e);
static QState HeartOfStorm_simple(HeartOfStorm * const me, QEvt const * const e);
static QState HeartOfStorm_mutant(HeartOfStorm * const me, QEvt const * const e);
static QState HeartOfStorm_immune(HeartOfStorm * const me, QEvt const * const e);
static QState HeartOfStorm_dead(HeartOfStorm * const me, QEvt const * const e);

#ifdef DESKTOP
static QState HeartOfStorm_final(HeartOfStorm * const me, QEvt const * const e);
#endif /* def DESKTOP */



static HeartOfStorm heartOfStorm; /* the only instance of the HeartOfStorm class */



/* global-scope definitions -----------------------------------------*/
QHsm * const the_heartOfStorm = (QHsm *) &heartOfStorm; /* the opaque pointer */

/*${SMs::HeartOfStorm_ctor} ................................................*/
void HeartOfStorm_ctor(
    unsigned int HP,
    unsigned int MaxHP,
    unsigned int State)
{
        HeartOfStorm *me = &heartOfStorm;
		me->CharHP = HP;
        me->MaxHP = MaxHP;
        switch (State) {
            case SIMPLE: {
                me->StartState =
                (QStateHandler)&HeartOfStorm_simple;
                break;
            }
            case MUTANT: {
                me->StartState =
                (QStateHandler)&HeartOfStorm_mutant;
                break;
            }
            case DEAD: {
                me->StartState =
                (QStateHandler)&HeartOfStorm_dead;
                break;

            }
            default:
                me->StartState =
                (QStateHandler)&HeartOfStorm_simple;
        }
	 QHsm_ctor(&me->super, Q_STATE_CAST(&HeartOfStorm_initial));
}
/*${SMs::HeartOfStorm} .....................................................*/
/*${SMs::HeartOfStorm::SM} .................................................*/
static QState HeartOfStorm_initial(HeartOfStorm * const me, QEvt const * const e) {
    /* ${SMs::HeartOfStorm::SM::initial} */
    return Q_TRAN(me->StartState);
    return Q_TRAN(&HeartOfStorm_simple);
}
/*${SMs::HeartOfStorm::SM::global} .........................................*/
static QState HeartOfStorm_global(HeartOfStorm * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {

#ifdef DESKTOP
        /* ${SMs::HeartOfStorm::SM::global::TERMINATE} */
        case TERMINATE_SIG: {
            status_ = Q_TRAN(&HeartOfStorm_final);
            break;
        }
#endif /* def DESKTOP */

        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${SMs::HeartOfStorm::SM::global::alive} ..................................*/
static QState HeartOfStorm_alive(HeartOfStorm * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::HeartOfStorm::SM::global::alive::PILL} */
        case PILL_SIG: {
            PillIndicate();
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::BUTTON_PRESSED} */
        case BUTTON_PRESSED_SIG: {
            ShowHitState((QHsm*)me);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::PILL_HIT_DOUBLE} */
        case PILL_HIT_DOUBLE_SIG: {
            UpdateMaxHP((QHsm*)me, DOUBLE_HP);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::PILL_HEAL} */
        case PILL_HEAL_SIG: {
            UpdateHP((QHsm*)me, me->MaxHP);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::KILL_SIGNAL_RECEIVED} */
        case KILL_SIGNAL_RECEIVED_SIG: {
            status_ = Q_TRAN(&HeartOfStorm_dead);
            break;
        }
        default: {
            status_ = Q_SUPER(&HeartOfStorm_global);
            break;
        }
    }
    return status_;
}
/*${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE} ......................*/
static QState HeartOfStorm_NOT_IMMUNE(HeartOfStorm * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::DAMAGE_RECEIVED} */
        case DAMAGE_RECEIVED_SIG: {
            /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::DAMAGE_RECEIVED::[me->CharHP<=e->damage]} */
            if (me->CharHP <= ((heartOfStormQEvt*)e)->damage) {
                status_ = Q_TRAN(&HeartOfStorm_dead);
            }
            /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::DAMAGE_RECEIVED::[else]} */
            else {
                me->CharHP -= ((heartOfStormQEvt*)e)->damage;
                IndicateDamage(((heartOfStormQEvt*)e)->damage);
                status_ = Q_HANDLED();
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&HeartOfStorm_alive);
            break;
        }
    }
    return status_;
}
/*${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::simple} ..............*/
static QState HeartOfStorm_simple(HeartOfStorm * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::simple} */
        case Q_ENTRY_SIG: {
            SaveState(SIMPLE);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::simple::PILL_RESET} */
        case PILL_RESET_SIG: {
            UpdateMaxHP((QHsm*)me, DEFAULT_HP);
            UpdateHP((QHsm*)me, DEFAULT_HP);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::simple::PILL_MUTANT} */
        case PILL_MUTANT_SIG: {
            status_ = Q_TRAN(&HeartOfStorm_mutant);
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::simple::PILL_IMMUNE} */
        case PILL_IMMUNE_SIG: {
            me->LastState = SIMPLE;
            status_ = Q_TRAN(&HeartOfStorm_immune);
            break;
        }
        default: {
            status_ = Q_SUPER(&HeartOfStorm_NOT_IMMUNE);
            break;
        }
    }
    return status_;
}
/*${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::mutant} ..............*/
static QState HeartOfStorm_mutant(HeartOfStorm * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::mutant} */
        case Q_ENTRY_SIG: {
            SaveState(MUTANT);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::mutant::BUTTON_LONG_PRESSED} */
        case BUTTON_LONG_PRESSED_SIG: {
            SendKillingSignal();
            KillingIndication();
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::mutant::PILL_RESET} */
        case PILL_RESET_SIG: {
            UpdateMaxHP((QHsm*)me, DEFAULT_HP);
            UpdateHP((QHsm*)me, DEFAULT_HP);
            status_ = Q_TRAN(&HeartOfStorm_simple);
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::NOT_IMMUNE::mutant::PILL_IMMUNE} */
        case PILL_IMMUNE_SIG: {
            me->LastState = MUTANT;
            status_ = Q_TRAN(&HeartOfStorm_immune);
            break;
        }
        default: {
            status_ = Q_SUPER(&HeartOfStorm_NOT_IMMUNE);
            break;
        }
    }
    return status_;
}
/*${SMs::HeartOfStorm::SM::global::alive::immune} ..........................*/
static QState HeartOfStorm_immune(HeartOfStorm * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::HeartOfStorm::SM::global::alive::immune} */
        case Q_ENTRY_SIG: {
            ClearPill();
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::immune::DAMAGE_RECEIVED} */
        case DAMAGE_RECEIVED_SIG: {
            Flash(Green, FLASH_MS);
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::alive::immune::PILL_REMOVED} */
        case PILL_REMOVED_SIG: {
            /* ${SMs::HeartOfStorm::SM::global::alive::immune::PILL_REMOVED::[me->LastState==MUTANT]} */
            if (me->LastState == MUTANT) {
                status_ = Q_TRAN(&HeartOfStorm_mutant);
            }
            /* ${SMs::HeartOfStorm::SM::global::alive::immune::PILL_REMOVED::[else]} */
            else {
                status_ = Q_TRAN(&HeartOfStorm_simple);
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&HeartOfStorm_alive);
            break;
        }
    }
    return status_;
}
/*${SMs::HeartOfStorm::SM::global::dead} ...................................*/
static QState HeartOfStorm_dead(HeartOfStorm * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::HeartOfStorm::SM::global::dead} */
        case Q_ENTRY_SIG: {
            SaveState(DEAD);
            UpdateHP((QHsm*)me, 0);
            IndicateDeath();
            status_ = Q_HANDLED();
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::dead::PILL_RESET} */
        case PILL_RESET_SIG: {
            UpdateMaxHP((QHsm*)me, DEFAULT_HP);
            UpdateHP((QHsm*)me, DEFAULT_HP);
            status_ = Q_TRAN(&HeartOfStorm_simple);
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::dead::PILL_MUTANT} */
        case PILL_MUTANT_SIG: {
            UpdateHP((QHsm*)me, DEFAULT_HP);
            status_ = Q_TRAN(&HeartOfStorm_mutant);
            break;
        }
        /* ${SMs::HeartOfStorm::SM::global::dead::PILL_HP_DOUBLE} */
        case PILL_HP_DOUBLE_SIG: {
            UpdateMaxHP((QHsm*)me, DOUBLE_HP);
            UpdateHP((QHsm*)me, DOUBLE_HP);
            status_ = Q_TRAN(&HeartOfStorm_simple);
            break;
        }
        default: {
            status_ = Q_SUPER(&HeartOfStorm_global);
            break;
        }
    }
    return status_;
}

#ifdef DESKTOP
/*${SMs::HeartOfStorm::SM::final} ..........................................*/
static QState HeartOfStorm_final(HeartOfStorm * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* ${SMs::HeartOfStorm::SM::final} */
        case Q_ENTRY_SIG: {
            printf("Bye! Bye!");
			exit(0);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
#endif /* def DESKTOP */




/*tranlated from diagrams code*/

